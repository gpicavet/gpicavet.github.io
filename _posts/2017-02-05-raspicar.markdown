---
layout: post
title:  "RaspiCAR : a robot car with Raspberry and Legos"
date:   2017-02-11 22:05:11 +0200
categories: jekyll update
---

<link href='//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css' rel='stylesheet'>
<style>

.carousel {
margin-bottom: 0;
padding: 0 40px 30px 40px;
}

.carousel-control {
left: -12px;
height: 40px;
width: 40px;
background: none repeat scroll 0 0 #222222;
border: 4px solid #FFFFFF;
border-radius: 23px 23px 23px 23px;
margin-top: 90px;
}
.carousel-control.right {
right: -12px;
}

.carousel-indicators {
right: 50%;
top: auto;
bottom: -10px;
margin-right: -19px;
}

.carousel-indicators li {
background: #cecece;
}

.carousel-indicators .active {
background: #428bca;
}
</style>
<script type='text/javascript' src='//code.jquery.com/jquery-1.10.2.min.js'></script>
<script type='text/javascript' src='//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js'></script>
<script type='text/javascript'>$(document).ready(function() {
$('#Carousel').carousel({
interval: 5000
})
$('#Carousel2').carousel({
  interval: 600000
})
});
</script>

<p>
I always wanted to make my own robot to eradicate human race, but i've never had time :) <br>
Why ? as a software engineer, hardware is obsiously more complex to debug and integrate than softwares. <br> But nowadays platforms like Raspeberry and Arduino greatly simplifies integration and prototyping (Of course it remains prototypes, you will never print optimized multi-layer board yourself, so you will love wires !). Making a humanoid robot is far too complex : if you want a basic moving robot a car is a lot simpler.
I wanted to reuse some legos as well, because i initially thought it will be simpler (if you are a DIY addict it's not necessarilty true!)
So this article show you the first part of this project, whose purpose was to practice hardware components integration and to provide some manual control via a Web interface.
</p>

<div class="container">
<div class="row">
<div class="col-md-12">
<div id="Carousel" class="carousel slide">

<ol class="carousel-indicators">
<li data-target="#Carousel" data-slide-to="0" class="active"></li>
<li data-target="#Carousel" data-slide-to="1"></li>
<li data-target="#Carousel" data-slide-to="2"></li>
</ol>

<!-- Carousel items -->
<div class="carousel-inner">

<div class="item active">
<div class="row">
<div class="col-md-12"><a href="#" class="thumbnail"><img src="/assets/raspicar/photo_1.jpg" alt="Image" style="max-width:100%;"></a></div>
</div><!--.row-->
</div><!--.item-->

<div class="item">
<div class="row">
<div class="col-md-12"><a href="#" class="thumbnail"><img src="/assets/raspicar/photo_2.jpg" alt="Image" style="max-width:100%;"></a></div>
</div><!--.row-->
</div><!--.item-->

<div class="item">
<div class="row">
<div class="col-md-12"><a href="#" class="thumbnail"><img src="/assets/raspicar/photo_3.jpg" alt="Image" style="max-width:100%;"></a></div>
</div><!--.row-->
</div><!--.item-->

</div><!--.carousel-inner-->
<a data-slide="prev" href="#Carousel" class="left carousel-control">‹</a>
<a data-slide="next" href="#Carousel" class="right carousel-control">›</a>
</div><!--.Carousel-->

</div>
</div>
</div><!--.container-->

## a small video !

<center>
<iframe id="ytplayer" type="text/html"
  src="https://www.youtube.com/embed/vF_nzevWZAE?autoplay=0&origin=https://gpicavet.github.io"
  frameborder="0"></iframe>
</center>

# Hardware Part

## Components

The components i used in this project. The overall costed nearly 150 € .

<div class="container">
<div class="row">
<div class="col-md-12">
<div id="Carousel2" class="carousel slide">

<ol class="carousel-indicators">
<li data-target="#Carousel2" data-slide-to="0" class="active"></li>
<li data-target="#Carousel2" data-slide-to="1"></li>
<li data-target="#Carousel2" data-slide-to="2"></li>
<li data-target="#Carousel2" data-slide-to="3"></li>
<li data-target="#Carousel2" data-slide-to="4"></li>
<li data-target="#Carousel2" data-slide-to="5"></li>
</ol>

<!-- Carousel items -->
<div class="carousel-inner"  style="min-height:300px">

<div class="item active">
<div class="row">
<div class="col-md-6"><a href="#" class="thumbnail"><img src="/assets/raspicar/pi3.jpg" alt="Image" style="max-width:100%;"></a>Raspberry Pi 3</div>
<div class="col-md-6"><a href="#" class="thumbnail"><img src="/assets/raspicar/arduino-uno.jpeg" alt="Image" style="max-width:100%;"></a>Arduino Uno</div>
</div><!--.row-->
</div><!--.item-->

<div class="item">
<div class="row">
<div class="col-md-6"><a href="#" class="thumbnail"><img src="/assets/raspicar/motor.jpg" alt="Image" style="max-width:100%;"></a>Nema stepper motor 11HS18-0674S (X2)</div>
<div class="col-md-6"><a href="#" class="thumbnail"><img src="/assets/raspicar/drv8834.jpeg" alt="Image" style="max-width:100%;"></a>stepper driver Polulu DRV8834 (X2)</div>
</div><!--.item-->
</div><!--.row-->

<div class="item">
<div class="row">
<div class="col-md-6"><a href="#" class="thumbnail"><img src="/assets/raspicar/coupler.jpg" alt="Image" style="max-width:100%;"></a>Axis Coupler (X2)</div>
<div class="col-md-6"><a href="#" class="thumbnail"><img src="/assets/raspicar/capa.jpg" alt="Image" style="max-width:100%;"></a>100µF Capacitor (X2)</div>
</div><!--.row-->
</div><!--.item-->

<div class="item">
<div class="row">
<div class="col-md-6"><a href="#" class="thumbnail"><img src="/assets/raspicar/battery.jpg" alt="Image" style="max-width:100%;"></a>10000mAh Li-Ion USB Battery</div>
<div class="col-md-6"><a href="#" class="thumbnail"><img src="/assets/raspicar/jumpers.jpeg" alt="Image" style="max-width:100%;"></a>Jumper wirers</div>
</div><!--.row-->
</div><!--.item-->

<div class="item">
<div class="row">
<div class="col-md-6"><a href="#" class="thumbnail"><img src="/assets/raspicar/breadboard.jpeg" alt="Image" style="max-width:100%;"></a>Mini Breadboard (X2)</div>
<div class="col-md-6"><a href="#" class="thumbnail"><img src="/assets/raspicar/webcam.jpeg" alt="Image" style="max-width:100%;"></a>An USB cam</div>
</div><!--.row-->
</div><!--.item-->

<div class="item">
<div class="row">
<div class="col-md-6"><a href="#" class="thumbnail"><img src="/assets/raspicar/legos.jpg" alt="Image" style="max-width:100%;"></a>And Legos of course !</div>
</div><!--.row-->
</div><!--.item-->

</div><!--.carousel-inner-->
<a data-slide="prev" href="#Carousel2" class="left carousel-control">‹</a>
<a data-slide="next" href="#Carousel2" class="right carousel-control">›</a>
</div><!--.Carousel-->

</div>
</div>
</div><!--.container-->


## Schema
![Schema](/assets/raspicar/raspicar_v1_bb.png)

## Why Legos ?
- Because with Legos you can build complex things easily :)
- Actually it's not so easy to integrate with motors not made by Lego corporation ;)
- For a lighter car, i could have used some plexiglas Chassis and 3D-printed components. Maybe for another project.

## Why not Lego Mindstorms ?
- I only used Lego Technic. You can already do cool things with Mindstorms, but i would have been limited for the next part. You can do even more cool things with custom components and Raspberry.

## Weight
- Raspi Car weights 1200g . That is one beautiful baby :)

## Motors and drivers
- I used two Nema Bipolar Stepper motors, one for steering and one for thrusting. Why steppers ? because i needed precision and high torque (because of the weight).
- I needed some lego gears to provide perpendicular transmission and to increase torque.
- Each Stepper Motor is controled with a DRV8834 stepper driver board, in order to simplify the arduino code and to safely limit the supply current.
- I tweaked the limit current as described on data sheet on the Pololu Site, using Vref = Imax / 2. As Nema max current is 670mA, Vref of the driver should be 335mV. From now i can provide higher voltage to motors without damage.

# Software Part

## Arduino Side
- Arduino Job consists in listening to commands on the USB port and driving the steering and thrust motors
- There are several ways to implement Arduino/Raspberry communication (I2C bus, SPI, Serial). I just choosed the easier :)
- Driving motors is done via the AccelStepper library : <http://www.airspayce.com/mikem/arduino/AccelStepper/>. I tested hardware PWM but it didn't fit my need : you can only control one stepper and frequency is very limited. So i used this sofware library. CPU usage is good enough if you dont exceed 5000 steps/seconds.

## Raspberry Side
- Raspberry Job consists in providing a Wifi communication, a web interface, and video streaming.

### Web UI & communication layer
- Web UI relies on Flask python Library on server-side, and jquery/ui on client-side
- client and server communication rely on WebSocket and Flask-socketio library with Eventlet engine
- python3 and flask are already bundled with raspbian distribution. But you need to manually install the socketio and eventlet  :
{% highlight shell %}
sudo pip3 install flask-socketio
sudo pip3 install eventlet
{% endhighlight %}



### video streaming
- I first tried ffmpeg and motion libraries but delay was too high (> 500ms).
- I ended up using mjpeg streamer as decribed in this nice article <https://jacobsalmela.com/2014/05/31/raspberry-pi-webcam-using-mjpg-streamer-over-internet/>.
It's more image capture than video streaming but framerate is good enough (5 to 10 fps) and delay is much better (100ms).

## source code & deploy
- <https://github.com/gpicavet/raspicar>
- deploy car.uno to Arduino
- Then on Raspberry you have to start ./start_mjpeg.sh and ./raspicar.py


## what's next ?
Next Part is really Challenging : take the full power of the raspberry "brain" and make the car smarter :).
